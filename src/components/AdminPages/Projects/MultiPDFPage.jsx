import React, { useState, useEffect, useRef, useContext } from "react";
import axiosInstance from "../../../../axiosInstance.js";
import { useNavigate, useParams } from "react-router-dom";
import { PDFDocument, StandardFonts } from "pdf-lib";
import * as pdfjsLib from "pdfjs-dist";
import "pdfjs-dist/build/pdf.worker.entry";
import { Viewer } from "@react-pdf-viewer/core";
import { defaultLayoutPlugin } from "@react-pdf-viewer/default-layout";
import "@react-pdf-viewer/core/lib/styles/index.css";
import "@react-pdf-viewer/default-layout/lib/styles/index.css";
import { FaCircleArrowLeft, FaArrowLeft, FaArrowRight  } from "react-icons/fa6";
import { AuthContext } from "../../Authentication/authContext.jsx";
import './ProjectStyles.css';
import JSZip from "jszip";
import FileSaver from "file-saver";
import { GiDivergence } from "react-icons/gi";

pdfjsLib.GlobalWorkerOptions.workerSrc = `https://unpkg.com/pdfjs-dist@2.16.105/build/pdf.worker.min.js`;

function MultiPDFEditor() {
    const { user } = useContext(AuthContext);
    const userRoles = user?.roles?.map(role => role.role_name) || [];
    const isAdmin = userRoles.includes('Admin');
    const { projectId } = useParams();
    const navigate = useNavigate();
    const [pdfFiles, setPdfFiles] = useState([]);
    const [selectedFiles, setSelectedFiles] = useState([]);
    const [modifiedPdfs, setModifiedPdfs] = useState({});
    const [uploadedImage, setUploadedImage] = useState(null);
    const [qrUrl, setQrUrl] = useState("");
    // const [activeFile, setActiveFile] = useState(null);
    const [activeIndex, setActiveIndex] = useState(0);
    const defaultLayoutPluginInstance = defaultLayoutPlugin();
    const [projectName, setProjectName] = useState('');

    useEffect(() => {
        const fetchPdfFiles = async () => {
            try {
                const response = await axiosInstance.get(`/project/${projectId}/files`);
                const pdfs = response.data.files;
                setPdfFiles(pdfs);
                setSelectedFiles(pdfs);
                // setActiveFile(pdfs[0]);
       
            } catch (error) {
                console.error("Error fetching PDF files:", error);
            }
        };

        const fetchProjectDetails = async () => {
          try {
            const response = await axiosInstance.get(
              `/project/${projectId}`
            );
            const { project_name } = response.data;
            setProjectName(project_name);
          } catch (error) {
            console.error('Error fetching project name:', error);
          }
        }

        fetchProjectDetails();
        fetchPdfFiles();
    }, [projectId]);

    const handleSelectionChange = (file) => {
        setSelectedFiles(prev => prev.includes(file) ? prev.filter(f => f !== file) : [...prev, file]);
    };

    const handleImageUpload = (event) => {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                setUploadedImage(e.target.result);
                const extractedFileName = file.name.split("EBJV-QR_")[1]?.replace(".png", "");
                let baseUrl = "https://cadstream.ebjv.e-fab.com.au";
                let autoGeneratedUrl = extractedFileName.endsWith(".ifc") 
                    ? `${baseUrl}/ifc-viewer/${projectId}/${extractedFileName}` 
                    : `${baseUrl}/project-folder/pdf-viewer/${projectId}/${extractedFileName}`;
                setQrUrl(autoGeneratedUrl);
            };
            reader.readAsDataURL(file);
        }
    };

    const modifyPDFs = async () => {
        if (!uploadedImage || !qrUrl || selectedFiles.length === 0) {
            alert("Please upload an image, provide a URL, and select at least one PDF.");
            return;
        }

        const updatedPdfs = {};
        for (const fileName of selectedFiles) {
            try {
                const fileUrl = await axiosInstance.get(`/uploads/${fileName}`, { responseType: "arraybuffer" });
                const arrayBuffer = fileUrl.data;
                const pdfDoc = await PDFDocument.load(arrayBuffer);
                const firstPage = pdfDoc.getPages()[0];
                const base64Data = uploadedImage.split(',')[1];
                const binaryString = atob(base64Data);
                const imageBytes = new Uint8Array(binaryString.length);
                for (let i = 0; i < binaryString.length; i++) {
                    imageBytes[i] = binaryString.charCodeAt(i);
                }
                const image = await pdfDoc.embedPng(imageBytes);
                const { width, height } = firstPage.getSize();
                const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
                const fontSize = 196;

                 let imageWidth = 180;
                 let imageHeight = 260;
                 let margin = 30;
                 let qrX = width - imageWidth - margin;
                 let qrY = margin + 155;
                 let textY = qrY - 30;
             
                 // Adjust for A0 or B1
                 if (width === 3370.394 && height === 2383.937) {
                   qrY += 50; // Shift upwards for larger pages
                   textY = qrY - 40; // Adjust text position accordingly
                 }
            
                // Draw the image
                firstPage.drawImage(image, {
                  x: qrX,
                  y: qrY,
                  width: imageWidth,
                  height: imageHeight,
                  opacity: 1,
                });

            
                firstPage.drawText(qrUrl, {
                  x: qrX ,
                  y: qrY + 80,
                  size: fontSize,
                  font, 
                  wordBreaks: [' ', '-', '/', '.'],
                  opacity: 0,
                });
            
                
                firstPage.drawText(qrUrl, {
                  x: qrX ,
                  y: textY + 40,
                  size: 14,
                  font, 
                  wordBreaks: [' ', '-', '/', '.'],
                  opacity: 0,
                });
            
                // Save modified PDF
                const pdfBytes = await pdfDoc.save();
                updatedPdfs[fileName] = URL.createObjectURL(new Blob([pdfBytes], { type: "application/pdf" }));
                // updatedPdfs[fileName] = new Blob([pdfBytes], { type: "application/pdf" });
            } catch (error) {
                console.error(`Error modifying ${fileName}:`, error);
            }
        }
        setModifiedPdfs(updatedPdfs);
    };

    const downloadPDFs = () => {
      if (Object.keys(modifiedPdfs).length === 0) return;
    
      const zip = new JSZip();
      const pdfPromises = Object.entries(modifiedPdfs).map(async ([fileName, blobUrl]) => {
        const response = await fetch(blobUrl);
        const pdfBlob = await response.blob();
        zip.file(`Modified_${fileName}`, pdfBlob);
      });
    
      Promise.all(pdfPromises).then(() => {
        zip.generateAsync({ type: "blob" }).then((content) => {
          FileSaver.saveAs(content, "Modified_PDFs.zip");
        });
      });
    };
    

    return (
        <div className="multipdf-container d-flex flex-column pb-2">
             <div className="pdf-preview-header d-flex flex-row ml-2 ">
                <span className="back-btn ml-3" onClick={() => navigate(`/project-folder/${projectId}/data/project-explorer`)}>
                  <FaCircleArrowLeft size={28} className="icon-left mr-2 align-items-center"/> Go Back
                </span>
              </div>  
          <div className="multipdf-wrapper d-flex flex-row mt-2 ">
            <div className="multipdf-sidebar">
                <h5>{projectName} - PDF Files</h5>
                <div className="pdf-item-wrapper">
                {pdfFiles.map((file, index) => (
                  <div key={file} className="pdf-item mb-1">
                    <input id="selectedPDF" type="checkbox" checked={selectedFiles.includes(file)} onChange={() => handleSelectionChange(file)} /> &nbsp; 
                    <span className="selectedPDF-label" onClick={() => setActiveIndex(index)}>{file}</span>
                  </div>
                ))}
                </div>
              
            </div>

            <div className="multipdf-main-content d-flex">
                <div className="multipdf-viewer mb-3">
                  <div className="d-flex justify-content-around mb-2">
                  <button className="pdfControl-btn" onClick={() => setActiveIndex((prev) => Math.max(prev - 1, 0))}><FaArrowLeft /></button>
                  <span> {selectedFiles[activeIndex]} </span>
                  <button className="pdfControl-btn" onClick={() => setActiveIndex((prev) => Math.min(prev + 1, selectedFiles.length - 1))}><FaArrowRight /></button>
                  </div>
                {selectedFiles.length > 0 && (
                  <Viewer key={selectedFiles[activeIndex]} fileUrl={modifiedPdfs[selectedFiles[activeIndex]] || `https://www.ebjv.api.e-fab.com.au/uploads/ifc-files/${selectedFiles[activeIndex]}`} plugins={[defaultLayoutPluginInstance]} />
                )}
                </div>
                {isAdmin && (
              <div className="d-flex flex-column mt-4">
                <div className="multipdf-controls mt-2">
                  <input type="file" accept="image/png, image/jpeg" onChange={handleImageUpload} />
                  <input className="extractedUrl" type="text"  value={qrUrl} onChange={(e) => setQrUrl(e.target.value)} />
                  <button className="addqr-btn" onClick={modifyPDFs}>Add QR to Selected PDFs</button>
                </div>
                
                <div className="d-flex justify-content-end mt-3">
                 <button className="btn btn-primary" onClick={downloadPDFs}>Download Modified PDFs</button>
                </div>
  
              </div>
                )}
            </div>
            </div>
        </div>
    );
}

export default MultiPDFEditor;
